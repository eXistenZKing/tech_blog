openapi: 3.1.0
info:
  title: Technical Blog
  version: 0.1.0
paths:
  /auth/jwt/login:
    post:
      tags:
        - Auth
      summary: Auth:Jwt.Login
      operationId: auth_jwt_login_auth_jwt_login_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_auth_jwt_login_auth_jwt_login_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BearerResponse'
              example:
                access_token: >-
                  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI
                token_type: bearer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                LOGIN_BAD_CREDENTIALS:
                  summary: Bad credentials or the user is inactive.
                  value:
                    detail: LOGIN_BAD_CREDENTIALS
                LOGIN_USER_NOT_VERIFIED:
                  summary: The user is not verified.
                  value:
                    detail: LOGIN_USER_NOT_VERIFIED
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/jwt/logout:
    post:
      tags:
        - Auth
      summary: Auth:Jwt.Logout
      operationId: auth_jwt_logout_auth_jwt_logout_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '401':
          description: Missing token or inactive user.
      security:
        - OAuth2PasswordBearer: []
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register:Register
      operationId: register_register_auth_register_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                REGISTER_USER_ALREADY_EXISTS:
                  summary: A user with this email already exists.
                  value:
                    detail: REGISTER_USER_ALREADY_EXISTS
                REGISTER_INVALID_PASSWORD:
                  summary: Password validation failed.
                  value:
                    detail:
                      code: REGISTER_INVALID_PASSWORD
                      reason: Password should beat least 3 characters
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /users/me:
    get:
      tags:
        - Users
      summary: Users:Current User
      operationId: users_current_user_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '401':
          description: Missing token or inactive user.
      security:
        - OAuth2PasswordBearer: []
    patch:
      tags:
        - Users
      summary: Users:Patch Current User
      operationId: users_patch_current_user_users_me_patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                UPDATE_USER_EMAIL_ALREADY_EXISTS:
                  summary: A user with this email already exists.
                  value:
                    detail: UPDATE_USER_EMAIL_ALREADY_EXISTS
                UPDATE_USER_INVALID_PASSWORD:
                  summary: Password validation failed.
                  value:
                    detail:
                      code: UPDATE_USER_INVALID_PASSWORD
                      reason: Password should beat least 3 characters
        '401':
          description: Missing token or inactive user.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /users/{id}:
    get:
      tags:
        - Users
      summary: Users:User
      operationId: users_user_users__id__get
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '401':
          description: Missing token or inactive user.
        '403':
          description: Not a superuser.
        '404':
          description: The user does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - Users
      summary: Users:Patch User
      operationId: users_patch_user_users__id__patch
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          content:
            application/json:
              examples:
                UPDATE_USER_EMAIL_ALREADY_EXISTS:
                  summary: A user with this email already exists.
                  value:
                    detail: UPDATE_USER_EMAIL_ALREADY_EXISTS
                UPDATE_USER_INVALID_PASSWORD:
                  summary: Password validation failed.
                  value:
                    detail:
                      code: UPDATE_USER_INVALID_PASSWORD
                      reason: Password should beat least 3 characters
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Bad Request
        '401':
          description: Missing token or inactive user.
        '403':
          description: Not a superuser.
        '404':
          description: The user does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Users
      summary: Users:Delete User
      operationId: users_delete_user_users__id__delete
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      responses:
        '204':
          description: Successful Response
        '401':
          description: Missing token or inactive user.
        '403':
          description: Not a superuser.
        '404':
          description: The user does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /posts/:
    get:
      tags:
        - Posts
      summary: Get Posts
      operationId: get_posts_posts__get
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: Page number
            default: 1
            title: Page
          description: Page number
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 50
            minimum: 1
            default: 10
            title: Size
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCustomized_PostListGet_'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Posts
      summary: Create Post
      operationId: create_post_posts__post
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostGet'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /posts/{post_id}:
    get:
      tags:
        - Posts
      summary: Get Post
      operationId: get_post_posts__post_id__get
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostGet'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - Posts
      summary: Update Post
      operationId: update_post_posts__post_id__patch
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostGet'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Posts
      summary: Delete Post
      operationId: delete_post_posts__post_id__delete
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Posts
      summary: Create Comment
      operationId: create_comment_posts__post_id__post
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentGet'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /posts/{post_id}/comment/{comment_id}:
    delete:
      tags:
        - Posts
      summary: Delete Comment
      operationId: delete_comment_posts__post_id__comment__comment_id__delete
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            title: Comment Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /categories/:
    get:
      tags:
        - Categories
      summary: Get Categories
      operationId: get_categories_categories__get
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: Page number
            default: 1
            title: Page
          description: Page number
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 50
            minimum: 1
            default: 10
            title: Size
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCustomized_CategoryListGet_'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Categories
      summary: Create Category
      operationId: create_category_categories__post
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryGet'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    BearerResponse:
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
      type: object
      required:
        - access_token
        - token_type
      title: BearerResponse
    Body_auth_jwt_login_auth_jwt_login_post:
      properties:
        grant_type:
          anyOf:
            - type: string
              pattern: password
            - type: 'null'
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
            - type: string
            - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
            - type: string
            - type: 'null'
          title: Client Secret
      type: object
      required:
        - username
        - password
      title: Body_auth_jwt_login_auth_jwt_login_post
    CategoryCreate:
      properties:
        name:
          type: string
          title: Name
      type: object
      required:
        - name
      title: CategoryCreate
    CategoryGet:
      properties:
        id:
          type: integer
          title: Id
        name:
          type: string
          title: Name
        slug:
          type: string
          title: Slug
        posts:
          items:
            $ref: '#/components/schemas/PostListGet'
          type: array
          title: Posts
      type: object
      required:
        - id
        - name
        - slug
        - posts
      title: CategoryGet
    CategoryListGet:
      properties:
        id:
          type: integer
          title: Id
        name:
          type: string
          title: Name
        slug:
          type: string
          title: Slug
      type: object
      required:
        - id
        - name
        - slug
      title: CategoryListGet
    CommentCreate:
      properties:
        text:
          type: string
          maxLength: 500
          title: Text
          description: Макс. длина комментария 500 символов.
      type: object
      required:
        - text
      title: CommentCreate
    CommentGet:
      properties:
        id:
          type: integer
          title: Id
        author:
          type: integer
          title: Author
        text:
          type: string
          title: Text
        post_id:
          type: integer
          title: Post Id
      type: object
      required:
        - id
        - author
        - text
        - post_id
      title: CommentGet
    ErrorModel:
      properties:
        detail:
          anyOf:
            - type: string
            - additionalProperties:
                type: string
              type: object
          title: Detail
      type: object
      required:
        - detail
      title: ErrorModel
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    PageCustomized_CategoryListGet_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/CategoryListGet'
          type: array
          title: Items
        total:
          anyOf:
            - type: integer
              minimum: 0
            - type: 'null'
          title: Total
        page:
          anyOf:
            - type: integer
              minimum: 1
            - type: 'null'
          title: Page
        size:
          anyOf:
            - type: integer
              minimum: 1
            - type: 'null'
          title: Size
        pages:
          anyOf:
            - type: integer
              minimum: 0
            - type: 'null'
          title: Pages
      type: object
      required:
        - items
        - total
        - page
        - size
      title: PageCustomized[CategoryListGet]
    PageCustomized_PostListGet_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/PostListGet'
          type: array
          title: Items
        total:
          anyOf:
            - type: integer
              minimum: 0
            - type: 'null'
          title: Total
        page:
          anyOf:
            - type: integer
              minimum: 1
            - type: 'null'
          title: Page
        size:
          anyOf:
            - type: integer
              minimum: 1
            - type: 'null'
          title: Size
        pages:
          anyOf:
            - type: integer
              minimum: 0
            - type: 'null'
          title: Pages
      type: object
      required:
        - items
        - total
        - page
        - size
      title: PageCustomized[PostListGet]
    PostCreate:
      properties:
        title:
          type: string
          title: Title
        text:
          type: string
          title: Text
        category:
          type: string
          title: Category
      type: object
      required:
        - title
        - text
        - category
      title: PostCreate
    PostGet:
      properties:
        id:
          type: integer
          title: Id
        title:
          type: string
          title: Title
        text:
          type: string
          title: Text
        category:
          type: string
          title: Category
        author:
          type: integer
          title: Author
      type: object
      required:
        - id
        - title
        - text
        - category
        - author
      title: PostGet
    PostListGet:
      properties:
        id:
          type: integer
          title: Id
        title:
          type: string
          title: Title
        text:
          type: string
          title: Text
        category:
          type: string
          title: Category
        author:
          type: integer
          title: Author
      type: object
      required:
        - id
        - title
        - text
        - category
        - author
      title: PostListGet
    PostUpdate:
      properties:
        title:
          anyOf:
            - type: string
            - type: 'null'
          title: Title
        text:
          anyOf:
            - type: string
            - type: 'null'
          title: Text
        category:
          anyOf:
            - type: string
            - type: 'null'
          title: Category
      type: object
      required:
        - title
        - text
        - category
      title: PostUpdate
    UserCreate:
      properties:
        username:
          type: string
          maxLength: 20
          minLength: 2
          title: Username
          description: Username должен быть от 2 до 20 символов
        email:
          type: string
          format: email
          title: Email
        password:
          type: string
          minLength: 6
          title: Password
          description: Мин. длина пароля 6 символов.
      type: object
      required:
        - username
        - email
        - password
      title: UserCreate
    UserRead:
      properties:
        id:
          type: integer
          title: Id
        email:
          type: string
          format: email
          title: Email
        username:
          type: string
          title: Username
        role_name:
          type: string
          title: Role Name
      type: object
      required:
        - id
        - email
        - username
        - role_name
      title: UserRead
    UserUpdate:
      properties:
        username:
          type: string
          maxLength: 20
          minLength: 2
          title: Username
          description: Username должен быть от 2 до 20 символов
        email:
          type: string
          format: email
          title: Email
        password:
          type: string
          minLength: 6
          title: Password
          description: Мин. длина пароля 6 символов.
      type: object
      required:
        - username
        - email
        - password
      title: UserUpdate
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: auth/jwt/login
